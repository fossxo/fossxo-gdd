###########
Game States
###########

A game state is a general and global part of the game. The active state is
updated every game loop, has access to the world's entities and resources, and
can receive events. States can also request a transition to a different state.


===========
State Trait
===========
In Amethyst states implement the `State trait <https://docs.amethyst.rs/stable/amethyst/trait.State.html>`__.
A summary of the State trait is shown in :numref:`uml-state-trait`.

..  _uml-state-trait:
..  uml::
    :caption: Notable methods provided by the State trait.

    !include rust_types.uml
    hide empty members

    trait(State) {
        +on_start(StateData)
        +on_stop(StateData)
        +on_pause(StateData)
        +on_resume(StateData)
        +handle_event(StateData, EventData) -> Trans
        +update(StateData) -> Trans
    }

Each method is provided a ``StateData`` structure that provide's access to the
world's entities and resources. Additionally, ``handle_event()`` is provided an
``EventData`` enum, shown in :numref:`uml-event-data-enum`, that aggregates the
different types of events available to the states.

..  _uml-event-data-enum:
..  uml::
    :caption: Event data available to states.

    !include rust_types.uml
    hide empty members

    enum(EventData) {
        Window(WindowEvent)
        Ui(UiEvent)
        Input(InputEvent)
        Player(PlayerEvent)
    }

The window, UI, and input events are generated by various Amethyst subsystems.
The remaining variants hold custom events generated by the game that states wish
wish to receive.


=============
State Diagram
=============
The state diagram in :numref:`uml-game-state-diagram` shows each state and their
state transitions. [#screenflowchart]_

..  _uml-game-state-diagram:
..  uml::
    :caption: State diagram for the game states.
    :height: 8in

    hide empty description

    [*] --> Loading
    Loading --> Game
    Game --> MainMenu

    MainMenu --> Game
    MainMenu --> SinglePlayerMenu
    MainMenu --> OptionsMenu
    MainMenu --> [*]

    OptionsMenu --> MainMenu

    SinglePlayerMenu --> Game
    SinglePlayerMenu --> SpeedrunMenu
    SinglePlayerMenu --> MainMenu

    SpeedrunMenu --> SinglePlayerMenu
    SpeedrunMenu --> SpeedrunGame
    SpeedrunGame --> SpeedrunMenu
    SpeedrunMenu --> SpeedrunBestTimeMenu
    SpeedrunBestTimeMenu --> SpeedrunMenu


.. _ref-game-state:

==========
Game State
==========
The game state is used for :ref:`ref-gameplay-single-player-mode` and
:ref:`ref-gameplay-two-player-mode` games.

Responsibilities include:

*   Spawn the player and AI opponent entities for playing the game.
*   Handle player events for when marks are placed.
*   Manage the game resource.
*   Show the game environment with the environment resource.
*   Show the :ref:`ref-ui-game-board` widgets including the menu button and
    status text.
*   Navigate to the :ref:`ref-main-menu-state`.

When the game state is started, the options to use are provided. This includes
if the game is single-player or multiplayer. For single-player, this is the
difficulty level and if the player is using X or O marks.


.. _ref-speedrun-game-state:

===================
Speedrun Game State
===================
The speedrun game state is used for :ref:`ref-gameplay-speed-run-mode` games.
[#speedrunstatedifference]_

Responsibilities include:

*   Spawn the player and AI opponent entities for playing the game.
*   Handle player events for when marks are placed.
*   Manage the game resource.
*   Keep track of the total speedrun time and time for each game.
*   Show the :ref:`ref-ui-speedrun-game-board` widgets including the menu
    button and status text.
*   Navigate to the :ref:`ref-speedrun-best-time-menu-state` providing the
    results of the speedrun. The results include a successful game along with
    the run's time, a lost game, or an aborted game from the player opening
    the menu.


=============
Loading State
=============
The loading state is the first state run when the game starts. It has the
following responsibilities:

*   Show the :ref:`ref-ui-loading-screen` widgets.
*   Queue the resources to load with asset loader.
*   Monitor and optionally report the loading progress.
*   Launch the :ref:`ref-game-state` when resource loading is complete. The
    single player game options last used are provided. [#firstgamesettings]_


..  TODO: perhaps describe more detail how this is accomplished?


..  _ref-main-menu-state:

===============
Main Menu State
===============
The main menu state allows uses to navigate to the other states.

Responsibilities include:

*   Show the :ref:`ref-ui-main-menu` widgets.
*   Navigate to the :ref:`ref-single-player-menu-state`.
*   Launch the :ref:`ref-game-state` with the multiplayer game flag.
*   Navigate to the :ref:`ref-options-menu-state`.
*   Navigate to the :ref:`ref-credits-menu-state`.
*   Open the game's user manual in an external browser.
*   Go to the Quit state to exit the game.


.. _ref-single-player-menu-state:

========================
Single-player Menu State
========================
The single player menu state has the following responsibilities:

*   Show the :ref:`ref-ui-single-player` menu widgets.
*   Launch the :ref:`ref-game-state` providing the single-player options
    selected by the player.
*   Navigate to the :ref:`ref-speedrun-menu-state` providing the player mark option.
*   Go back to the :ref:`ref-main-menu-state`.


.. _ref-speedrun-menu-state:

===================
Speedrun Menu State
===================
The speedrun menu state is the entry point to speed run games.

*   Show the :ref:`ref-ui-speedrun` menu widgets.
*   Query the best speed run times.
*   Launch the :ref:`ref-speedrun-game-state` providing the player mark option.
*   Go back to the :ref:`ref-single-player-menu-state`.

When the speedrun menu state is started, it is optionally provided the result of
the speedrun game. It uses this information to know if it should show the
instructional text, show the game results, or navigate to the best time menu.

..  TODO: link to file formats?


.. _ref-speedrun-best-time-menu-state:

=============================
Speedrun Best Time Menu State
=============================

*  Show the speed run best time dialog widgets described in the
   :ref:`ref-ui-speedrun` menu.
*  Save the best time information to the database.
*  Navigate to the :ref:`ref-speedrun-menu-state`.


.. _ref-credits-menu-state:

==================
Credits Menu State
==================

*   Show the :ref:`ref-ui-credits` menu widgets.
*   Open the game's licence compliance information contained in the user manual
    in an external browser.
*   Use the environments to show different in progress games.
*   Go back to the :ref:`ref-main-menu-state`.

.. TODO: What env system to use?


.. _ref-options-menu-state:

==================
Options Menu State
==================

*   Show the :ref:`ref-ui-options` menu widgets.
*   Apply the user provided options and save the options to disk.
*   Allow resetting options to default values.
*   Go back to the :ref:`ref-main-menu-state`.


..  rubric:: Footnotes

..  [#screenflowchart] The game state diagram is similar, but not identical, to
      the :ref:`ref-ui-screen-flowchart` shown in :numref:`uml-screen-flowchart`.
      Some notable differences include how the speedrun game state always
      transitions back to the speedrun menu state.

..  [#speedrunstatedifference] At first glance the speedrun game state has
      similar responsibilities the game state. However, the speedrun games use
      different rules, show additional widgets, and transition to different
      states. Thus it this mode gets its own state.

..  [#firstgamesettings] The :ref:`ref-ui-game-board` section further describes
      the behavior of the game when first started.
